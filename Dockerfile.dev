# Using multistage process to build a Docker image
# This is to ensure all we do is copy the binaries to the final image / leave out any additional tools we may have installed

# Builder stage
FROM public.ecr.aws/docker/library/golang:1.25.3 AS builder
ENV GOMIG_VERSION=v4.15.2
ENV PLATFORM=linux
# ensure your token has write permissions
ARG GH_TOKEN="<use: --build-arg GH_TOKEN=$GH_PACKAGE_TOKEN>"

USER root

# for zscale users
#ADD zscaler.crt /usr/local/share/ca-certificates/foo.crt
#RUN chmod 644 /usr/local/share/ca-certificates/foo.crt && update-ca-certificates

#RUN set -ex \
#    && echo "Config git for GOPRIVATE dependencies" \
#    && go env -w GOPRIVATE="github.com/Gilmardealcantara/*" \
#    && git config --global url."https://${GH_TOKEN}@github.com".insteadOf https://github.com

# create the working directory
WORKDIR /go/bin/go-microsvc-template/

# need this to rebuild the app on save in dev environment
RUN go install github.com/cespare/reflex@latest

# efficiently managing dependencies: https://stackoverflow.com/a/62946938
COPY go.mod .
COPY go.sum .
RUN go mod download

# copying src after above deps to avoid re-downloading deps on every change
COPY . /go/bin/go-microsvc-template/

# build executable
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -installsuffix cgo -o /go/bin/go-microsvc-template/server ./cmd/api/

FROM alpine3.14 as runtime

USER root

RUN set -ex \
    && apk upgrade --no-cache \
    && apk add \
    postgresql-client \
    postgresql-dev \
    && rm -rf /var/cache/apk/* /tmp/* /var/tmp/*

COPY .env* /home/app/

# copy the app binary built in the last step into the new image
COPY --from=builder /go/bin/go-microsvc-template/server /home/app/

USER app

# run app
ENTRYPOINT ["./server"]
#CMD ["./server"]
#ENTRYPOINT ["tail", "-f", "/dev/null"]

# docker build . -f Dockerfile.dev --build-arg GH_TOKEN=$GH_PACKAGE_TOKEN -t go-micro-template --platform="linux/amd64"
# docker run go-micro-template
